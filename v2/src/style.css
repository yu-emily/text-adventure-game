/*
================================
Coder: Emily Yu 
Date: 03/18/2019 - 03/22/2019
Main Related Files: game.html, play.js, greensock.js

Description: 
Text adventure game where player types in instructions to forward the story.

1. Create a multiple room area: have at least 9 areas and no more than 20 areas.
2. The player types in directions (for example: "east", "west", "north") and then will be taken to the next room. Current game location is also described.
3. The player picks up at least 5 items and uses that item in another room.  
4. The game will have a "save" option. When the player returns to the game, in the same browser, s/he can start the game in the same room with the same backpack objects from last time. 
5. Have a start screen, play screen, and end screen.
6. Update code to utilize ES6:
(1) at least one example of template literals
(2) use let and const
(3) include methods such as startsWith, endsWith, and includes.
(4) convert at least one function to an arrow function
(5) use at least one object literal
7. Use jQuery, Greensock or any other Javascript library in the game. 
8. Every room/area has its corresponding image.
9. Primary part of code should pass JSLint, ESLint, or JSHint.
10. Add sound effects.
11. Have a cheat-sheet at hand. 

====================================
*/


body{
    /*changed background color to black to make the screens look smoother*/
    background-color: black;
    box-sizing: border-box;
    /*there's 8px margin between the body and window, set margin-top to -1 px and margin-left to -2px to have the lines around the box appear*/
    margin-top: -1px;
    margin-left: -2px;
    /*max-width: 1400px;*/
}

/*---PLAYER INPUT AREA/HEADER CSS---
font-size unit is vw (viewport width) to adjust to screen size*/
header{
    width: 100%;
    height: 80px;
    display: flex;
    border: 5px solid black;
}

/*targeting starting from the second one, every div child of the header*/
/*neat article on targeting child elements: https://css-tricks.com/useful-nth-child-recipies/*/
header>div:nth-child(n+2){
    border-left: 5px solid black;
}

#title{
    font-family: 'Felipa', cursive;
    font-size: 2vw;
    text-align: center;
    width: 15%;
    padding: 10px;
}

#request{
    font-family: 'Ubuntu', sans-serif;
    font-size: 2vw;
    text-align: center;
    padding: 25px;
    width: 15%;
}

#input{
    width: 35%;
}

input[type=text]{
    /*set height to less than 100% so as not to cover border; set width to 95% to cover the whole input area*/
    height: 98%;
    width: 95%;
    border: 0;
    background-color: #BB75D5;
    font-size: 2vw;
    padding-left: 15px;
    line-height: 100px;
}

#enter{
    font-family: 'Ubuntu', sans-serif;
    font-size: 2.5vw;
    width: 15%;
    text-align: center;
    padding: 20px;
}

#enter:hover{
    background-color: black;
    color: #FDBC51;
    font-weight: bold;
}

.cheatSheet{
    width: 30%;
}

#cheatSheet{
    height: 40px;
    background-color: #FDBC51;
    text-align: center;
    font-family: 'Ubuntu', sans-serif;
    font-size: 2.5vw;
    padding: 20px;
}

#cheatSheet:hover{
    background-color: black;
    color: #BB75D5;
    font-weight: bold;
}


#cheatContent{
    width: 25%;
    /*added margin-top so that it aligns with/appears to slide under the button*/
    margin-top: 5px;
    /*hopefully this makes it easier to read*/
    right: -10px;
    height: 500px;
    padding: 0 30px;
    background-color: darkgrey;
    position: absolute;
    font-size: 1.5vw;
    display: none;
    /*allow content to be scrollable if screen-size-width is smaller*/
    overflow-x: auto;
    overflow-y: auto;
    /*allows the scrollbar to show up*/
    max-height: 100%;
    /*cover the canvas map display*/
    z-index: 4;
}


/*--MODAL CSS--*/
.modal-background{
    display: block;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
}

#modalGamePlay{
    background-color: rgb(0, 0, 0, 0.7);
    z-index: 1;
    display: none;
}

.modal-content{
    position: relative;
    background-color: cornsilk;
    color: black;
    margin: 5% auto;
    padding: 50px;
    width: 75%;
    /*allows the scrollbar to show up*/
    max-height: 100%;
    overflow-y: auto;
}

#gameplayContent>h3{
    font-family: 'Ubuntu', sans-serif;
    text-align: center;
    font-size: 40px;
}

#gameplayContent{
    width: 50%;
    overflow-y: auto;
}

#gameplayContent>p{
    font-family: 'Josefin Sans', sans-serif;
    font-size: 20px;
}

#closeTwo{
    color: black;
    position: relative;
    float: right;
    width: 45px;
    height: 45px;
    text-align: center;
    font-size: 40px;
    font-weight: bold;
}


/*--MAIN AREA CSS--*/
#container{
    padding: 35px;
    display: flex;
    /*to make overflowed horizontal content float to the bottom*/
    flex-wrap: wrap;
}

#image{
    margin-right: 30px;
    max-width: 600px;
    max-height: 300px;
    min-width: 270px;
    min-height: 180px;
    width: 100%;
    background-color: black;
}

#background{
    object-fit: cover;
    display: block;
    max-width: 600px;
    max-height: 400px;
    min-width: 270px;
    min-height: 180px;
    /*allow the image to be scaled*/
    width: 100%;
    margin: 0 auto;
    border: 15px solid black;
}

#game{
    max-width: 300px;
    min-width: 100px;
    /*allow the div area to be scaled*/
    width: 100%;
    margin-left: 35px;
}


/*I intentionally made the width of the child wider than the parent container, so that when the screen size is resized, the parent container will float to the upper row (next to the image) when the width reaches 300px instead of 550px, and the content from the div areas would appear (next to the image) without having to wait until the screen size is expanded to hold a width of 550px div (also making the content overflow out of the div area)*/
#game>div{
    width: 460px;
}

/*font-size unit is vw (viewport width) to adjust to screen size*/
button{
    border: 3px solid black;
    background-color: #FDBC51;    
    padding: 10px;
    font-family: 'Ubuntu', sans-serif;
    font-size: 1.5vw;
    font-weight: bold;
    margin: 5px;
}


/*font-size unit is vw (viewport width) to adjust to screen size*/
#message{
    font-family: 'Josefin Sans', sans-serif;
    font-size: 1.5vw;
    text-align: left;
}

/*targeting every p child of #message except the last one*/
/*neat article on targeting child elements: https://css-tricks.com/useful-nth-child-recipies/*/
#message>p:nth-child(-n+2){
    border-bottom: 3px solid black;
    padding-bottom: 10px;
}

/*special css for targeting the disabled button*/
#restore:enabled{
    background-color: #FDBC51;   
    color: black;
}
#restore, #restore:hover:enabled{
    background-color: black;
    color: white;
}

.otherButton:hover{
    background-color: black;
    color: white;
}

.otherButton:active{
    background-color: #BB75D5;
    color: black;
}

/*--SCREEN SETUP--*/
/*start screen*/
#startScreen{
    width: 100%;
    height: 100%;
    background-color: cornsilk;
    color: black;
    padding: 30px;
    margin: -8px; 
}

#startScreen>h3 {
    font-family: 'Amatic SC', cursive;
    text-align: center;
    font-size: 50px;
    margin: -10px;
}

#startScreen>p {
    font-family: 'Felipa', cursive;
    font-size: 30px;
}

#instruction>h4{
    font-family: 'Ubuntu', sans-serif;
    font-size: 40px;
    margin: 0px;
    text-align: center;
}

#instruction>p{
    font-family: 'Josefin Sans', sans-serif;
    text-align: center;
}

#startScreen>button{
    border: 3px solid black;
    background-color: white;    
    padding: 10px;
    font-family: 'Ubuntu', sans-serif;
    font-size: 1.5vw;
    font-weight: bold;
    margin-left: 45%;
    
}

#startScreen>button:hover{
    background-color: black;
    color: white;
}

#startScreen>button:active{
    background-color: #BB75D5;
    color: #FDBC51;
    border: 3px solid #FDBC51;
}

/*play screen*/
#playScreen{
    /*added background color to match the main color of gameplay*/
    background-color: #BB75D5;
    display: none;
}

/*end screen*/
#endScreen{
    width: 100%;
    height: 100%;
    display: none;
}

/*set width and height to fill the whole screen*/
#blackScreen{
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: black;
}

.text{
    color: white;
    font-family: 'Felipa', cursive;
    font-size: 50px;
    margin-top: 10px;
    padding: 5px 25px;
}

#lineOne{
    margin-top: 100px;
}

.text:nth-child(2n){
    text-align: right;
}

#secretRoom{
    background-image: url(../img/secret_room.jpg);
    background-size: cover; 
    height: 100vh;
    position: relative;
    z-index: -1;
}

#congratulations{
    width: 250px;
    height: 250px;
    border-radius: 100%;
    background-color: #8CB7BD;
    color: black;
    left: 50px;
    top: 50px;
    position: absolute;
    text-align: center;
}

#endGame{
    width: 250px;
    height: 250px;
    border-radius: 100%;
    background-color: #8CB7BD;
    color: black;
    right: 50px;
    bottom: 50px;
    position: absolute;
    text-align: center;
}

#congratulations>p:first-child,
#endGame>p:first-child{
    padding-top: 50px;
    font-size: 20px;
    font-family: 'Ubuntu', sans-serif;
    font-weight: bold;
}

#congratulations>p:last-child,
#endGame>p:last-child{
    padding-top: 20px;
    font-size: 16px;
    font-family: 'Ubuntu Condensed', sans-serif;
}

hr{
    border-color: black;
    size: 5px;
}


/*MAP IMAGE CSS*/
#game>canvas{
    position: relative;
    left: 50%;
}

/*attempt to fix the layout when the screen shrinks, less successful*/
@media screen and (max-width: 800px) {
#game>canvas {
    margin-top: 70px;
  }
}